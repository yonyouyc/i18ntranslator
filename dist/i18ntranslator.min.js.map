{"version":3,"file":"i18ntranslator.min.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/app.js","webpack:///./src/util/dictionary.js","webpack:///./src/util/file.js","webpack:///./src/util/setting.js","webpack:///./src/util/xlsx.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"line-reader\"), require(\"xlsx\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"line-reader\", \"xlsx\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"line-reader\"), require(\"xlsx\")) : factory(root[\"line-reader\"], root[\"xlsx\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function(__WEBPACK_EXTERNAL_MODULE_line_reader__, __WEBPACK_EXTERNAL_MODULE_xlsx__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/app.js\");\n","var _XLSX = require('./util/xlsx')\nvar readFileContent = require('./util/file').readFileContent\nvar setting = require('./util/setting')\nmodule.exports = {\n  writeXlsx: _XLSX.writeXlsx,\n  readXlsx: _XLSX.readXlsx,\n  readFileContent: readFileContent,\n  setting: setting\n}","let dictionnary = {\n  '中文': 'chinese'\n}\nvar myDictionary = {}\nfunction generateDictionary(fileKeys, key, value) {\n  myDictionary[key] = value\n  fileKeys.push(key)\n}\n\nfunction getChinese(fileKeys, line) {\n  var str_cut = null\n  var str_len = line.length\n  for (var i = 0; i < str_len; i++) {\n    var a = line.charAt(i);\n    if (escape(a).length > 4) {\n      if (!str_cut) {\n        str_cut = new String()\n      }\n      //中文字符的长度经编码之后大于4\n      str_cut = str_cut.concat(a);\n    }\n    if (escape(a).length <= 4 || i === (str_len - 1)) {\n      if (str_cut) {\n        generateDictionary(fileKeys, str_cut.toString(), '')  //将中文字符作为myDictionary对象的键名，并初始化值为''\n      }\n      str_cut = null\n    }\n  }\n}\nmodule.exports = {\n  dictionnary: dictionnary,\n  destDictionary: myDictionary,\n  generateDictionary: generateDictionary,\n  getChinese: getChinese\n}","var fs = require('fs')\nvar lineReader = require('line-reader')\nvar getChinese = require('./dictionary').getChinese\nvar destDictionary = require('./dictionary').destDictionary\nvar setting = require('./setting')\n// 读取所有code目录下的文件\nvar path = require('path')\n// 当前目录下js和html文件的总数\nvar filesize = 0\n// 当前目录下已经完成读取的js和html文件的总数\nvar finishedSize = 0\n// 当前目录下文件夹的数量\nvar directorySize = 0\n// 当前目录下已经遍历的文件夹数量\nvar getDirectorySize = 0\n// 当前目录下非js和html文件的总数\nvar otherFileSize = 0\n// 当前目录下已经遍历的非js和html文件的数量\nvar getOtherFileSize = 0\n// 存储所给目录下的所有文件夹\nvar directoryArr = []\nfunction read () {\n\n}\nfunction write () {\n\n}\n// 处理一行注释\nfunction oneLine(fileKeys,line, start, end) {\n  // 获取注释前面的内容\n  var startStr = line.substring(0, start)\n  // 获取注释后面的内容\n  var endStr = line.substring(end)\n  if (startStr) {\n    getChinese(fileKeys,startStr)\n  }\n  if (endStr) {\n    getChinese(fileKeys,endStr)\n  }\n}\n\n// 处理多行注释开始情况\nfunction mulLineStart(fileKeys,line, start) {\n  var startStr = line.substring(0, start)\n  if (startStr) {\n    getChinese(fileKeys,startStr)\n  }\n}\n\n// 处理多行注释结束情况\nfunction mulLineEnd(fileKeys,line, end) {\n  var endStr = line.substring(end)\n  if (endStr) {\n    getChinese(fileKeys,endStr)\n  }\n}\n// 用来判断是否当前目录要被忽略掉\nfunction isDirectoryIgnore (directory) {\n// 如果目录在需要忽略的目录中，则不继续翻译此目录下的内容\n  var ignoreDirectory = setting.getIgnoreDirectory()\n  var flag = false\n  for (var i = 0; i < ignoreDirectory.length; i++) {\n    if (directory.indexOf(ignoreDirectory[i]) > -1) {\n      flag =  true\n      break\n    }\n  }\n  return flag\n}\nfunction readFileStr (file, callback) {\n  // 这里读取当前文件全部内容，用来判断该文件的内容是否为空，如果为空的话lineReader.eachLine不会执行\n  var str = fs.readFileSync(file).toString()\n  if (!str) {\n    callback(file + 'no data')\n    return\n  } else {\n    callback(file, str)\n  }\n}\nfunction readLine (file, callback) {\n  // 这里读取当前文件全部内容，用来判断该文件的内容是否为空，如果为空的话lineReader.eachLine不会执行\n  var str = fs.readFileSync(file).toString()\n  if (!str) {\n    callback(file + 'no data')\n    return\n  }\n  var fileKeys = []\n  // 判断是否是在当前选取的模板文件范围内\n  var templateList = setting.extensionTemplateName\n  // 找出html文件夹的注释\n  if (isFileExtensionInList(file, templateList)) {\n    var status = 'code'\n    lineReader.eachLine(file, function (line, last) {\n      switch (status) {\n        case 'code':\n          var startIndex = line.indexOf('<!--')\n          var endIndex = line.indexOf('-->')\n          var _startIndex = line.indexOf('/*')\n          var _endIndex = line.indexOf('*/')\n          // html注释在同一行的情况\n          if (startIndex > -1 && endIndex > -1) {\n            // 改变status的值为code\n            status = 'code'\n            oneLine(fileKeys,line, startIndex, endIndex)\n          } else if (_startIndex > -1 && _endIndex > -1) {\n            // 改变status的值为code\n            status = 'code'\n            oneLine(fileKeys,line, _startIndex, _endIndex)\n          } else if (startIndex > -1 && endIndex < 0) { //多行注释的情况\n            // 改变status的状态为commentStart，表示是多行注释，直到-->出现\n            status = 'commentStart'\n            mulLineStart(fileKeys,line, startIndex)\n          } else if (_startIndex > -1 && _endIndex < 0) {\n            // 改变status的状态为commentStart，表示是多行注释，直到-->出现\n            status = 'commentStart'\n            mulLineStart(fileKeys,line, _startIndex)\n          } else if (startIndex < 0 && _startIndex < 0) {\n            status = 'code'\n            getChinese(fileKeys,line)\n          }\n          break\n        case 'commentStart':\n          var endIndex = line.indexOf('-->')\n          var _endIndex = line.indexOf('*/')\n          // 多行注释结束，改变status=code，否则的话就status继续为commentStart\n          if (endIndex > -1) {\n            mulLineEnd(fileKeys,line, endIndex)\n            status = 'code'\n          } else if (_endIndex > -1) {\n            mulLineEnd(fileKeys,line, _endIndex)\n            status = 'code'\n          } else {\n            status = 'commentStart'\n          }\n          break\n        default:\n          status = 'code'\n          break\n      }\n      if (last) {\n        callback(file, str, fileKeys)\n      }\n    })\n  }\n  var extensionFileList = setting.extensionName\n  // 找出js文件的注释\n  if (isFileExtensionInList(file, extensionFileList)) {\n    var status = 'code'\n    lineReader.eachLine(file, function (line, last) {\n      switch (status) {\n        case 'code':\n          // js里有多行注释和单行注释的情况\n          var singleStartIndex = line.indexOf('//')\n          var mulStartIndex = line.indexOf('/*')\n          var mulEndIndex = line.indexOf('*/')\n          // 用//单行注释的情况且不在''里面\n          if (singleStartIndex > -1 && line.search(/('|\").*\\/\\/.*('|\")$/) < 0) {\n            status = 'code'\n            var startStr = line.substring(0, singleStartIndex)\n            if (startStr) {\n              getChinese(fileKeys,startStr)\n            }\n          } else if (mulStartIndex > -1 && mulEndIndex > -1) {// 用/* */单行注释的情况\n            status = 'code'\n            var startStr = line.substring(0, mulStartIndex)\n            var endStr = line.substring(mulEndIndex)\n            if (startStr) {\n              getChinese(fileKeys,startStr)\n            }\n            if (endStr) {\n              getChinese(fileKeys,endStr)\n            }\n          } else if (mulStartIndex > -1 && mulEndIndex < 0) {// 用/* */多行注释的情况\n            status = 'startComment' // 多行注释开始\n            var startStr = line.substring(0, mulStartIndex)\n            if (startStr) {\n              getChinese(fileKeys,startStr)\n            }\n          } else {\n            getChinese(fileKeys,line)\n          }\n          break\n        case 'startComment':\n          var mulEndIndex = line.indexOf('*/')\n          // 多行注释结束\n          if (mulEndIndex > -1) {\n            status = 'code'\n            var endStr = line.substring(mulEndIndex)\n            if (endStr) {\n              getChinese(fileKeys,endStr)\n            }\n          } else {\n            status = 'startComment'\n          }\n          break\n        default:\n          status = 'code'\n      }\n      if (last) {\n        callback(file, str, fileKeys)\n      }\n    })\n  }\n}\n// 给当前文件或文件夹添加完整的路径\nfunction fullPath(dir, files) {\n  return files.map(function (f) {\n    return path.join(dir, f)\n  })\n}\nvar singleFileCallback = function (path, str) {}\nvar endCallBack = function () {}\n// 工具的入口函数，路径、结束之后的callback函数、单个文件输出完的callback函数\nvar fileextensions = setting.extensionTemplateName.concat(setting.extensionName)\nfunction isFileExtensionInList (filepath, list) {\n  var flag = false\n  if (!list.length) {\n    return false\n  }\n  for (var i = 0; i < list.length; i++) {\n    if (filepath.indexOf(list[i]) > -1) {\n      flag = true\n      break\n    }\n  }\n  return flag\n}\nfunction readFileContent(path, endCB, fileCB) {\n  if (fileCB) {\n    singleFileCallback = fileCB\n  }\n  if (endCB) {\n    endCallBack = endCB\n  }\n  // 读取传入的目录path,先遍历目录下的文件，都遍历完之后，遍历目录下的目录\n  fs.readdir(path, function (err, files) {\n    if (err) console.log(err)\n    files = fullPath(path, files)\n    if (files) {\n      // 循环获取当前目录下js和html文件、非这两种文件以及文件夹的数量\n      for (var i = 0; i < files.length; i++) {\n        var stats = fs.statSync(files[i])\n        if (stats.isFile()) {\n          if (isFileExtensionInList(files[i], fileextensions)) {\n            filesize++\n          } else {\n            otherFileSize++\n          }\n        }\n        if (stats.isDirectory()) {\n          if (!isDirectoryIgnore(files[i])) {\n            directorySize++\n          }\n        }\n      }\n      files.forEach(function (f) {\n        fs.stat(f, function (err, stats) {\n          if (stats.isFile()) {\n            if (isFileExtensionInList(f, fileextensions)) {\n              readLine(f, function (path, fileData, filekeys) {\n                finishedSize++\n                singleFileCallback(path, fileData, filekeys)\n                // 判断当前目录下的js和html文件是否已经遍历完了，遍历完的话就遍历下一个子目录\n                if (filesize == finishedSize) {\n                  filesize = 0\n                  finishedSize = 0\n                  getOtherFileSize = 0\n                  otherFileSize = 0\n                  directorySize = 0\n                  getDirectorySize = 0\n                  var directory = directoryArr.shift()\n                  if (directory) {\n                    if (!isDirectoryIgnore(directory)) {\n                      readFileContent(directory)\n                    }\n                  } else {\n                    // writeTxt('../dest/final.txt', JSON.stringify(destDictionary));\n                    endCallBack(destDictionary)\n                  }\n                }\n              })\n            } else {\n              readFileStr(f, function (path, fileData) {\n                singleFileCallback(path, fileData, 'otherfile')\n              })\n              // 这里处理当前目录下即没有html、js文件也没有文件夹的情况\n              if (filesize == 0 && directorySize == 0) {\n                getOtherFileSize++\n                if (getOtherFileSize == otherFileSize) {\n                  getOtherFileSize = 0\n                  otherFileSize = 0\n                  var directory = directoryArr.shift()\n                  if (directory) {\n                    if (!isDirectoryIgnore(directory)) {\n                      readFileContent(directory)\n                    }\n                  } else {\n                    // writeTxt('../dest/final.txt', JSON.stringify(destDictionary));\n                    endCallBack(destDictionary)\n                  }\n                }\n\n              }\n            }\n          }\n          if (stats.isDirectory()) {\n            if (!isDirectoryIgnore(f)) {\n              directoryArr.push(f)\n              // 这里处理当前目录下没有js和html文件的情况\n              if (filesize == 0) {\n                getDirectorySize++\n                if (getDirectorySize == directorySize) {\n                  getDirectorySize = 0\n                  otherFileSize = 0\n                  getOtherFileSize = 0\n                  directorySize = 0\n                  var directory = directoryArr.shift()\n                  if (directory) {\n                    if (!isDirectoryIgnore(directory)) {\n                      readFileContent(directory)\n                    }\n                  }\n                }\n              }\n            }\n          }\n        })\n      })\n    }\n    else {\n      console.log(path + '：此目录下没有任何文件，请确认')\n    }\n  })\n}\nmodule.exports = {\n  read: read,\n  write: write,\n  readLine: readLine,\n  readFileContent: readFileContent\n}","var ignoreDirectory = []\nvar extensionName = ['.js', '.vue']\nvar extensionTemplateName = ['.html']\nvar settings = {\n  extensionName: extensionName,\n  extensionTemplateName: extensionTemplateName,\n  setExtensionName: function (array) {\n    extensionName = array\n  },\n  setExtensionTemplateName: function (array) {\n    extensionTemplateName = array\n  },\n  getIgnoreDirectory: function () {\n    return ignoreDirectory\n  },\n  setIgnoreDirectory: function (array) {\n    ignoreDirectory = array\n  }\n}\nmodule.exports = settings","var XLSX = require('xlsx')\n// 创建构造函数\nfunction workBook() {\n  this.SheetNames = [];\n  this.Sheets = {};\n}\n// 将json数据转换成xlsx能识别的数组格式\nfunction jsonToArray(jsonData) {\n  var arr = [];\n  var titleArr = ['key', 'value'];\n  arr.push(titleArr);\n  for (var key in jsonData) {\n    var coArr = [];\n    coArr.push(key);\n    coArr.push(jsonData[key]);\n    arr.push(coArr);\n  }\n  return arr;\n}\n// 将数组转化为xlsx能识别的形式\nfunction arrayToXlsx(data) {\n  var ws = {};\n  var range = {s: {c: 10000000, r: 10000000}, e: {c: 0, r: 0}};\n  for (var R = 0; R != data.length; ++R) {\n    for (var C = 0; C != data[R].length; ++C) {\n      if (range.s.r > R) range.s.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (range.e.c < C) range.e.c = C;\n      var cell = {v: data[R][C]};\n      if (cell.v == null) continue;\n      var cell_ref = XLSX.utils.encode_cell({c: C, r: R});\n\n      if (typeof cell.v === 'number') cell.t = 'n';\n      else if (typeof cell.v === 'boolean') cell.t = 'b';\n      else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.z = XLSX.SSF._table[14];\n        cell.v = datenum(cell.v);\n      }\n      else cell.t = 's';\n\n      ws[cell_ref] = cell;\n    }\n  }\n  if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);\n  return ws;\n}\n// 写xlsx文件\nfunction writeXlsx(data, path) {\n  var wb = new workBook();\n  var jsonArr = jsonToArray(data);\n  var ws = arrayToXlsx(jsonArr);\n  wb.SheetNames.push('chinese');\n  wb.Sheets['chinese'] = ws;\n  XLSX.writeFile(wb, path);\n  console.log('The xlsx file has been saved!');\n}\nfunction readXlsx (path) {\n  var wb = XLSX.readFile(path);\n  /* grab first sheet */\n  var wsname = wb.SheetNames[0];\n  var ws = wb.Sheets[wsname];\n  /* generate HTML */\n  var json = XLSX.utils.sheet_to_json(ws);\n  return json\n}\n\nmodule.exports = {\n  writeXlsx: writeXlsx,\n  readXlsx: readXlsx\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClnVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}