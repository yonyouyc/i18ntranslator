(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("line-reader"), require("xlsx"));
	else if(typeof define === 'function' && define.amd)
		define(["line-reader", "xlsx"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("line-reader"), require("xlsx")) : factory(root["line-reader"], root["xlsx"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(global, function(__WEBPACK_EXTERNAL_MODULE_line_reader__, __WEBPACK_EXTERNAL_MODULE_xlsx__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _XLSX = __webpack_require__(/*! ./util/xlsx */ "./src/util/xlsx.js")
var readFileContent = __webpack_require__(/*! ./util/file */ "./src/util/file.js").readFileContent
var setting = __webpack_require__(/*! ./util/setting */ "./src/util/setting.js")
module.exports = {
  writeXlsx: _XLSX.writeXlsx,
  readXlsx: _XLSX.readXlsx,
  readFileContent: readFileContent,
  setting: setting
}

/***/ }),

/***/ "./src/util/dictionary.js":
/*!********************************!*\
  !*** ./src/util/dictionary.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

let dictionnary = {
  '中文': 'chinese'
}
var myDictionary = {}
function generateDictionary(fileKeys, key, value) {
  myDictionary[key] = value
  fileKeys.push(key)
}

function getChinese(fileKeys, line) {
  var str_cut = null
  var str_len = line.length
  for (var i = 0; i < str_len; i++) {
    var a = line.charAt(i);
    if (escape(a).length > 4) {
      if (!str_cut) {
        str_cut = new String()
      }
      //中文字符的长度经编码之后大于4
      str_cut = str_cut.concat(a);
    }
    if (escape(a).length <= 4 || i === (str_len - 1)) {
      if (str_cut) {
        generateDictionary(fileKeys, str_cut.toString(), '')  //将中文字符作为myDictionary对象的键名，并初始化值为''
      }
      str_cut = null
    }
  }
}
module.exports = {
  dictionnary: dictionnary,
  destDictionary: myDictionary,
  generateDictionary: generateDictionary,
  getChinese: getChinese
}

/***/ }),

/***/ "./src/util/file.js":
/*!**************************!*\
  !*** ./src/util/file.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fs = __webpack_require__(/*! fs */ "fs")
var lineReader = __webpack_require__(/*! line-reader */ "line-reader")
var getChinese = __webpack_require__(/*! ./dictionary */ "./src/util/dictionary.js").getChinese
var destDictionary = __webpack_require__(/*! ./dictionary */ "./src/util/dictionary.js").destDictionary
var setting = __webpack_require__(/*! ./setting */ "./src/util/setting.js")
// 读取所有code目录下的文件
var path = __webpack_require__(/*! path */ "path")
// 当前目录下js和html文件的总数
var filesize = 0
// 当前目录下已经完成读取的js和html文件的总数
var finishedSize = 0
// 当前目录下文件夹的数量
var directorySize = 0
// 当前目录下已经遍历的文件夹数量
var getDirectorySize = 0
// 当前目录下非js和html文件的总数
var otherFileSize = 0
// 当前目录下已经遍历的非js和html文件的数量
var getOtherFileSize = 0
// 存储所给目录下的所有文件夹
var directoryArr = []
function read () {

}
function write () {

}
// 处理一行注释
function oneLine(fileKeys,line, start, end) {
  // 获取注释前面的内容
  var startStr = line.substring(0, start)
  // 获取注释后面的内容
  var endStr = line.substring(end)
  if (startStr) {
    getChinese(fileKeys,startStr)
  }
  if (endStr) {
    getChinese(fileKeys,endStr)
  }
}

// 处理多行注释开始情况
function mulLineStart(fileKeys,line, start) {
  var startStr = line.substring(0, start)
  if (startStr) {
    getChinese(fileKeys,startStr)
  }
}

// 处理多行注释结束情况
function mulLineEnd(fileKeys,line, end) {
  var endStr = line.substring(end)
  if (endStr) {
    getChinese(fileKeys,endStr)
  }
}
// 用来判断是否当前目录要被忽略掉
function isDirectoryIgnore (directory) {
// 如果目录在需要忽略的目录中，则不继续翻译此目录下的内容
  var ignoreDirectory = setting.getIgnoreDirectory()
  var flag = false
  for (var i = 0; i < ignoreDirectory.length; i++) {
    if (directory.indexOf(ignoreDirectory[i]) > -1) {
      flag =  true
      break
    }
  }
  return flag
}
function readFileStr (file, callback) {
  // 这里读取当前文件全部内容，用来判断该文件的内容是否为空，如果为空的话lineReader.eachLine不会执行
  var str = fs.readFileSync(file).toString()
  if (!str) {
    callback(file + 'no data')
    return
  } else {
    callback(file, str)
  }
}
function readLine (file, callback) {
  // 这里读取当前文件全部内容，用来判断该文件的内容是否为空，如果为空的话lineReader.eachLine不会执行
  var str = fs.readFileSync(file).toString()
  if (!str) {
    callback(file + 'no data')
    return
  }
  var fileKeys = []
  // 判断是否是在当前选取的模板文件范围内
  var templateList = setting.extensionTemplateName
  // 找出html文件夹的注释
  if (isFileExtensionInList(file, templateList)) {
    var status = 'code'
    lineReader.eachLine(file, function (line, last) {
      switch (status) {
        case 'code':
          var startIndex = line.indexOf('<!--')
          var endIndex = line.indexOf('-->')
          var _startIndex = line.indexOf('/*')
          var _endIndex = line.indexOf('*/')
          // html注释在同一行的情况
          if (startIndex > -1 && endIndex > -1) {
            // 改变status的值为code
            status = 'code'
            oneLine(fileKeys,line, startIndex, endIndex)
          } else if (_startIndex > -1 && _endIndex > -1) {
            // 改变status的值为code
            status = 'code'
            oneLine(fileKeys,line, _startIndex, _endIndex)
          } else if (startIndex > -1 && endIndex < 0) { //多行注释的情况
            // 改变status的状态为commentStart，表示是多行注释，直到-->出现
            status = 'commentStart'
            mulLineStart(fileKeys,line, startIndex)
          } else if (_startIndex > -1 && _endIndex < 0) {
            // 改变status的状态为commentStart，表示是多行注释，直到-->出现
            status = 'commentStart'
            mulLineStart(fileKeys,line, _startIndex)
          } else if (startIndex < 0 && _startIndex < 0) {
            status = 'code'
            getChinese(fileKeys,line)
          }
          break
        case 'commentStart':
          var endIndex = line.indexOf('-->')
          var _endIndex = line.indexOf('*/')
          // 多行注释结束，改变status=code，否则的话就status继续为commentStart
          if (endIndex > -1) {
            mulLineEnd(fileKeys,line, endIndex)
            status = 'code'
          } else if (_endIndex > -1) {
            mulLineEnd(fileKeys,line, _endIndex)
            status = 'code'
          } else {
            status = 'commentStart'
          }
          break
        default:
          status = 'code'
          break
      }
      if (last) {
        callback(file, str, fileKeys)
      }
    })
  }
  var extensionFileList = setting.extensionName
  // 找出js文件的注释
  if (isFileExtensionInList(file, extensionFileList)) {
    var status = 'code'
    lineReader.eachLine(file, function (line, last) {
      switch (status) {
        case 'code':
          // js里有多行注释和单行注释的情况
          var singleStartIndex = line.indexOf('//')
          var mulStartIndex = line.indexOf('/*')
          var mulEndIndex = line.indexOf('*/')
          // 用//单行注释的情况且不在''里面
          if (singleStartIndex > -1 && line.search(/('|").*\/\/.*('|")$/) < 0) {
            status = 'code'
            var startStr = line.substring(0, singleStartIndex)
            if (startStr) {
              getChinese(fileKeys,startStr)
            }
          } else if (mulStartIndex > -1 && mulEndIndex > -1) {// 用/* */单行注释的情况
            status = 'code'
            var startStr = line.substring(0, mulStartIndex)
            var endStr = line.substring(mulEndIndex)
            if (startStr) {
              getChinese(fileKeys,startStr)
            }
            if (endStr) {
              getChinese(fileKeys,endStr)
            }
          } else if (mulStartIndex > -1 && mulEndIndex < 0) {// 用/* */多行注释的情况
            status = 'startComment' // 多行注释开始
            var startStr = line.substring(0, mulStartIndex)
            if (startStr) {
              getChinese(fileKeys,startStr)
            }
          } else {
            getChinese(fileKeys,line)
          }
          break
        case 'startComment':
          var mulEndIndex = line.indexOf('*/')
          // 多行注释结束
          if (mulEndIndex > -1) {
            status = 'code'
            var endStr = line.substring(mulEndIndex)
            if (endStr) {
              getChinese(fileKeys,endStr)
            }
          } else {
            status = 'startComment'
          }
          break
        default:
          status = 'code'
      }
      if (last) {
        callback(file, str, fileKeys)
      }
    })
  }
}
// 给当前文件或文件夹添加完整的路径
function fullPath(dir, files) {
  return files.map(function (f) {
    return path.join(dir, f)
  })
}
var singleFileCallback = function (path, str) {}
var endCallBack = function () {}
// 工具的入口函数，路径、结束之后的callback函数、单个文件输出完的callback函数
var fileextensions = setting.extensionTemplateName.concat(setting.extensionName)
function isFileExtensionInList (filepath, list) {
  var flag = false
  if (!list.length) {
    return false
  }
  for (var i = 0; i < list.length; i++) {
    if (filepath.indexOf(list[i]) > -1) {
      flag = true
      break
    }
  }
  return flag
}
function readFileContent(path, endCB, fileCB) {
  if (fileCB) {
    singleFileCallback = fileCB
  }
  if (endCB) {
    endCallBack = endCB
  }
  // 读取传入的目录path,先遍历目录下的文件，都遍历完之后，遍历目录下的目录
  fs.readdir(path, function (err, files) {
    if (err) console.log(err)
    files = fullPath(path, files)
    if (files) {
      // 循环获取当前目录下js和html文件、非这两种文件以及文件夹的数量
      for (var i = 0; i < files.length; i++) {
        var stats = fs.statSync(files[i])
        if (stats.isFile()) {
          if (isFileExtensionInList(files[i], fileextensions)) {
            filesize++
          } else {
            otherFileSize++
          }
        }
        if (stats.isDirectory()) {
          if (!isDirectoryIgnore(files[i])) {
            directorySize++
          }
        }
      }
      files.forEach(function (f) {
        fs.stat(f, function (err, stats) {
          if (stats.isFile()) {
            if (isFileExtensionInList(f, fileextensions)) {
              readLine(f, function (path, fileData, filekeys) {
                finishedSize++
                singleFileCallback(path, fileData, filekeys)
                // 判断当前目录下的js和html文件是否已经遍历完了，遍历完的话就遍历下一个子目录
                if (filesize == finishedSize) {
                  filesize = 0
                  finishedSize = 0
                  getOtherFileSize = 0
                  otherFileSize = 0
                  directorySize = 0
                  getDirectorySize = 0
                  var directory = directoryArr.shift()
                  if (directory) {
                    if (!isDirectoryIgnore(directory)) {
                      readFileContent(directory)
                    }
                  } else {
                    // writeTxt('../dest/final.txt', JSON.stringify(destDictionary));
                    endCallBack(destDictionary)
                  }
                }
              })
            } else {
              readFileStr(f, function (path, fileData) {
                singleFileCallback(path, fileData, 'otherfile')
              })
              // 这里处理当前目录下即没有html、js文件也没有文件夹的情况
              if (filesize == 0 && directorySize == 0) {
                getOtherFileSize++
                if (getOtherFileSize == otherFileSize) {
                  getOtherFileSize = 0
                  otherFileSize = 0
                  var directory = directoryArr.shift()
                  if (directory) {
                    if (!isDirectoryIgnore(directory)) {
                      readFileContent(directory)
                    }
                  } else {
                    // writeTxt('../dest/final.txt', JSON.stringify(destDictionary));
                    endCallBack(destDictionary)
                  }
                }

              }
            }
          }
          if (stats.isDirectory()) {
            if (!isDirectoryIgnore(f)) {
              directoryArr.push(f)
              // 这里处理当前目录下没有js和html文件的情况
              if (filesize == 0) {
                getDirectorySize++
                if (getDirectorySize == directorySize) {
                  getDirectorySize = 0
                  otherFileSize = 0
                  getOtherFileSize = 0
                  directorySize = 0
                  var directory = directoryArr.shift()
                  if (directory) {
                    if (!isDirectoryIgnore(directory)) {
                      readFileContent(directory)
                    }
                  }
                }
              }
            }
          }
        })
      })
    }
    else {
      console.log(path + '：此目录下没有任何文件，请确认')
    }
  })
}
module.exports = {
  read: read,
  write: write,
  readLine: readLine,
  readFileContent: readFileContent
}

/***/ }),

/***/ "./src/util/setting.js":
/*!*****************************!*\
  !*** ./src/util/setting.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ignoreDirectory = []
var extensionName = ['.js', '.vue']
var extensionTemplateName = ['.html']
var settings = {
  extensionName: extensionName,
  extensionTemplateName: extensionTemplateName,
  setExtensionName: function (array) {
    extensionName = array
  },
  setExtensionTemplateName: function (array) {
    extensionTemplateName = array
  },
  getIgnoreDirectory: function () {
    return ignoreDirectory
  },
  setIgnoreDirectory: function (array) {
    ignoreDirectory = array
  }
}
module.exports = settings

/***/ }),

/***/ "./src/util/xlsx.js":
/*!**************************!*\
  !*** ./src/util/xlsx.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var XLSX = __webpack_require__(/*! xlsx */ "xlsx")
// 创建构造函数
function workBook() {
  this.SheetNames = [];
  this.Sheets = {};
}
// 将json数据转换成xlsx能识别的数组格式
function jsonToArray(jsonData) {
  var arr = [];
  var titleArr = ['key', 'value'];
  arr.push(titleArr);
  for (var key in jsonData) {
    var coArr = [];
    coArr.push(key);
    coArr.push(jsonData[key]);
    arr.push(coArr);
  }
  return arr;
}
// 将数组转化为xlsx能识别的形式
function arrayToXlsx(data) {
  var ws = {};
  var range = {s: {c: 10000000, r: 10000000}, e: {c: 0, r: 0}};
  for (var R = 0; R != data.length; ++R) {
    for (var C = 0; C != data[R].length; ++C) {
      if (range.s.r > R) range.s.r = R;
      if (range.s.c > C) range.s.c = C;
      if (range.e.r < R) range.e.r = R;
      if (range.e.c < C) range.e.c = C;
      var cell = {v: data[R][C]};
      if (cell.v == null) continue;
      var cell_ref = XLSX.utils.encode_cell({c: C, r: R});

      if (typeof cell.v === 'number') cell.t = 'n';
      else if (typeof cell.v === 'boolean') cell.t = 'b';
      else if (cell.v instanceof Date) {
        cell.t = 'n';
        cell.z = XLSX.SSF._table[14];
        cell.v = datenum(cell.v);
      }
      else cell.t = 's';

      ws[cell_ref] = cell;
    }
  }
  if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
  return ws;
}
// 写xlsx文件
function writeXlsx(data, path) {
  var wb = new workBook();
  var jsonArr = jsonToArray(data);
  var ws = arrayToXlsx(jsonArr);
  wb.SheetNames.push('chinese');
  wb.Sheets['chinese'] = ws;
  XLSX.writeFile(wb, path);
  console.log('The xlsx file has been saved!');
}
function readXlsx (path) {
  var wb = XLSX.readFile(path);
  /* grab first sheet */
  var wsname = wb.SheetNames[0];
  var ws = wb.Sheets[wsname];
  /* generate HTML */
  var json = XLSX.utils.sheet_to_json(ws);
  return json
}

module.exports = {
  writeXlsx: writeXlsx,
  readXlsx: readXlsx
}

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),

/***/ "line-reader":
/*!**************************************************************************************************************!*\
  !*** external {"commonjs":"line-reader","commonjs2":"line-reader","amd":"line-reader","root":"line-reader"} ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_line_reader__;

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),

/***/ "xlsx":
/*!**********************************************************************************!*\
  !*** external {"commonjs":"xlsx","commonjs2":"xlsx","amd":"xlsx","root":"xlsx"} ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_xlsx__;

/***/ })

/******/ });
});
//# sourceMappingURL=i18ntranslator.min.js.map